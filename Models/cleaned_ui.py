import streamlit as st
import os
from pdf2docx import Converter
import docx
import functioned_model_3_0 as fm
import base64
import matplotlib.pyplot as plt
import textstat
import PyPDF2

st.title("Legal Sense")
st.write("###### Know the likeliness of your Legal text being generated by AI")
st.write("###### Browse through the different features on the sidebar to analyze your document")

st.sidebar.write("## Upload :gear:")
uploaded_file = st.sidebar.file_uploader("Upload your Legal PDF", type="pdf")

summarize_button = st.sidebar.button("Summarize Document")
readability_button = st.sidebar.button("Document Insights")
view_button = st.sidebar.button("View Document")

content = ''
text_input = ''
filepath = ''
flag = 0
summary = ''
compare_button = ''

def getText(filename):
    doc = docx.Document(filename)
    fullText = []
    for para in doc.paragraphs:
        fullText.append(para.text)
    return '\n'.join(fullText)

def get_text_from_PDF(pdf_path):
    reader = PyPDF2.PdfReader(pdf_path)
    # Initialize an empty string to store the extracted text
    all_text = ""

    # Loop through all pages and extract text
    for page_num in range(len(reader.pages)):
        # Get a specific page from the pdf file
        page = reader.pages[page_num]

        # Extract text from the page
        text = page.extract_text()

        # Concatenate the text to the existing string
        all_text += text
    return all_text

def generate_prediction(text_input):
    st.subheader("Model Classification")
    res = fm.classification(text_input)
    result = "{:.2f}".format(res[0] * 100)
    result_string = "The model predicts that this input was "+str(result)+" %" + " likely generated by AI"

    st.write(result_string)
    if res[1]:
        st.write("###### This input was generated by AI")
    else:
        st.write("###### This input was written by a HUMAN")

def displayPDF(file):
    # Opening file from file path
    with open(file, "rb") as f:
        base64_pdf = base64.b64encode(f.read()).decode('utf-8')

    # Embedding PDF in HTML
    pdf_display = F'<embed src="data:application/pdf;base64,{base64_pdf}" width="700" height="1000" type="application/pdf">'

    # Displaying File
    st.markdown(pdf_display, unsafe_allow_html=True)

def get_readability_plot(text):

    scores = {
    'Flesch Reading Ease (FRE)': textstat.flesch_reading_ease(text),
    'SMOG Index': textstat.smog_index(text),
    'Flesch-Kincaid Grade (FKG)': textstat.flesch_kincaid_grade(text),
    'Coleman-Liau Index': textstat.coleman_liau_index(text),
    'Automated Readability Index': textstat.automated_readability_index(text),
    'Dale-Chall Readability Score': textstat.dale_chall_readability_score(text),
    'Gunning Fog': textstat.gunning_fog(text)
    }

    # Create bar plot
    plt.figure(figsize=(10, 6))
    plt.barh(list(scores.keys()), list(scores.values()), color='skyblue')
    plt.xlabel('Scores')
    plt.title('Readability Scores')
    plt.xlim(0, max(scores.values()) + 5) 
    plt.gca().invert_yaxis()  # To display the highest score at the top
    # plt.show()
    st.pyplot(plt.gcf())
    return scores

def get_insights(score):
    if score['Flesch Reading Ease (FRE)'] >= 50 and score['Flesch Reading Ease (FRE)'] <= 59:
        st.write("An FRE score between the range **50-59** suggests that the text is **fairly difficult** to understand")
    if score['Flesch Reading Ease (FRE)'] >= 60 and score['Flesch Reading Ease (FRE)'] <= 69:
            st.write("An FRE score between the range **60-69** suggests that the text is **standard** to understand")
    if score['Flesch Reading Ease (FRE)'] >= 70 and score['Flesch Reading Ease (FRE)'] <= 79:
        st.write("An FRE score between the range **70-79** suggests that the text is **fairly easy** to understand")
    
    st.markdown("**All the other metrics suggest the education level one must have to understand the text using \
             different text features**")
    st.write('')
    st.write("The SMOG Index suggests that the U.S. grade level required to understand the text is {}".\
             format(round(score['SMOG Index'])))
    st.write("The FKG score suggests that the U.S. grade level required to understand the text is {}".\
             format(round(score['Flesch-Kincaid Grade (FKG)'])))
    st.write("The Coleman-Liau Index suggests that the U.S. grade level required to understand the text is {}".\
             format(round(score['Coleman-Liau Index'])))
    st.write("The Automated Readability Index suggests that the U.S. grade level required to understand the text is {}".\
             format(round(score['Automated Readability Index'])))
    st.write("The Dale-Chall Readability Score suggests that the U.S. grade level required to understand the text is {}".\
             format(round(score['Dale-Chall Readability Score'])))
    st.write("The Gunning Fog score suggests that the U.S. grade level required to understand the text is {}".\
             format(round(score['Gunning Fog'])))
    st.write('')
    url = "https://nahidkomol.com/blog/what-are-the-readability-metrics/"
    st.markdown("Click the link to learn more on the Metrics(%s)" % url)

if uploaded_file:
    flag = 1
    with open(os.path.join("D:/Capstone/",uploaded_file.name),"wb") as f:
        f.write(uploaded_file.getbuffer())
        
        # Keeping the PDF's location in a separate variable
        filepath = os.path.join(r"D:/Capstone/",uploaded_file.name)
        
        # Maintaining the Document's path in a separate variable
        docx_file = r"D:/Capstone/temp.docx"
        
        # converting pdf to docx
        content = Converter(filepath)
        content.convert(docx_file)
        content.close()
        
        #extracting text from docx
        text_input = getText(docx_file)

        generate_prediction(text_input)

    if summarize_button:
        st.subheader("Abstractive Summary")
        summary = fm.summarization(text_input)
        st.write(summary)
        with st.expander("Compare with Original Document"):
            displayPDF(filepath)

    if readability_button:
        st.subheader("Bar Plot with Readability Scores")
        scores = get_readability_plot(get_text_from_PDF(filepath))
        with st.expander("Get Insights"):
            get_insights(scores)

    if view_button:
        st.subheader("Displaying Document...")
        displayPDF(filepath)

if uploaded_file is None and flag:
    st.write('file removed')
    os.remove(filepath)
    os.remove(docx_file)