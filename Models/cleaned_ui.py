import streamlit as st
import os
from pdf2docx import Converter
import docx
import case_summarization as cs
import functioned_model_2_0 as fm
import word_cloud_generator as wc
from PIL import Image

st.title("Legal Sense")
st.write("###### Know the likeliness of your Legal text being generated by AI")
st.write("###### Browse through the different features on the sidebar to analyze your document")

st.sidebar.write("## Upload :gear:")
uploaded_file = st.sidebar.file_uploader("Upload your Legal PDF", type="pdf")

summarize_button = st.sidebar.button("Summarize Document")
visualize_button = st.sidebar.button("Visualize Document")
# pred_button = st.sidebar.button("Generate Prediction")

content = ''
text_input = ''
filepath = ''
flag = 0

def getText(filename):
    doc = docx.Document(filename)
    fullText = []
    for para in doc.paragraphs:
        fullText.append(para.text)
    return '\n'.join(fullText)

def generate_prediction(text_input):
    st.subheader("Model Classification")
    res = fm.classification(text_input)
    result = "{:.2f}".format(res[0] * 100)
    result_string = "The model predicts that this input was "+str(result)+" %" + " likely generated by AI"

    st.write(result_string)
    if res[1]:
        st.write("###### This input was generated by AI")
    else:
        st.write("###### This input was written by a HUMAN")

if uploaded_file:
    flag = 1
    with open(os.path.join("D:/Capstone/",uploaded_file.name),"wb") as f:
        f.write(uploaded_file.getbuffer())
        
        # Keeping the PDF's location in a separate variable
        filepath = os.path.join(r"D:/Capstone/",uploaded_file.name)
        
        # Maintaining the Document's path in a separate variable
        docx_file = r"D:/Capstone/temp.docx"
        
        # converting pdf to docx
        content = Converter(filepath)
        content.convert(docx_file)
        content.close()
        
        #extracting text from docx
        text_input = getText(docx_file)

        generate_prediction(text_input)

    if summarize_button:
        st.subheader("NER Extractions")
        summary = cs.extract_summary(text_input)
        st.write(summary)

    if visualize_button:
        st.subheader("Visualizations")
        # st.write("vis here")
        wc.generate_wordcloud(text_input)
        wordcloud_image = Image.open('D:/Capstone/wordcloud.png')
        st.image(wordcloud_image)

if uploaded_file is None and flag:
    st.write('file removed')
    os.remove(filepath)
    os.remove(docx_file)